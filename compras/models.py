from django.db import models

# Create your models here.

from django.db import models
from django.utils import timezone
from decimal import Decimal

class Fornecedor(models.Model):
    nome = models.CharField(
        max_length=100,
        verbose_name="Nome do Fornecedor",
        help_text="Nome ou raz√£o social do fornecedor"
    )
    contato = models.CharField(
        max_length=100,
        blank=True,
        verbose_name="Contato",
        help_text="Telefone, email ou pessoa de contato"
    )
    observacoes = models.TextField(
        blank=True,
        verbose_name="Observa√ß√µes",
        help_text="Informa√ß√µes adicionais sobre o fornecedor"
    )
    ativo = models.BooleanField(
        default=True,
        verbose_name="Ativo",
        help_text="Fornecedor ativo para novas compras"
    )
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name = "üè™ Fornecedor"
        verbose_name_plural = "üè™ Fornecedores"
        ordering = ['nome']

    def __str__(self):
        return self.nome

class CartaoCredito(models.Model):
    nome = models.CharField(
        max_length=50,
        verbose_name="Nome do Cart√£o",
        help_text="Ex: Santander, Nubank, Ita√∫"
    )
    limite = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        blank=True,
        null=True,
        verbose_name="Limite",
        help_text="Limite do cart√£o (opcional)"
    )
    vencimento_fatura = models.IntegerField(
        choices=[(i, f"Dia {i}") for i in range(1, 32)],
        default=10,
        verbose_name="Vencimento da Fatura",
        help_text="Dia do m√™s que vence a fatura"
    )
    ativo = models.BooleanField(
        default=True,
        verbose_name="Ativo"
    )

    class Meta:
        verbose_name = "üí≥ Cart√£o de Cr√©dito"
        verbose_name_plural = "üí≥ Cart√µes de Cr√©dito"
        ordering = ['nome']

    def __str__(self):
        return self.nome

class Compra(models.Model):
    FORMA_PAGAMENTO_CHOICES = [
        ('dinheiro', 'üíµ Dinheiro'),
        ('pix', 'üì± PIX'),
        ('debito', 'üí≥ D√©bito'),
        ('credito', 'üîÑ Cr√©dito'),
    ]

    PARCELAS_CHOICES = [
        (1, '1x √† vista'),
        (2, '2x sem juros'),
        (3, '3x sem juros'),
        (4, '4x sem juros'),
        (5, '5x sem juros'),
        (6, '6x sem juros'),
        (7, '7x sem juros'),
        (8, '8x sem juros'),
        (9, '9x sem juros'),
        (10, '10x sem juros'),
        (11, '11x sem juros'),
        (12, '12x sem juros'),
    ]

    fornecedor = models.ForeignKey(
        Fornecedor,
        on_delete=models.PROTECT,
        verbose_name="üè™ Fornecedor",
        help_text="Selecione o fornecedor"
    )
    descricao = models.CharField(
        max_length=200,
        verbose_name="üìù Descri√ß√£o",
        help_text="Descri√ß√£o dos itens comprados"
    )
    valor_total = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        verbose_name="üí∞ Valor Total",
        help_text="Valor total da compra"
    )
    data_compra = models.DateField(
        default=timezone.now,
        verbose_name="üìÖ Data da Compra"
    )
    forma_pagamento = models.CharField(
        max_length=10,
        choices=FORMA_PAGAMENTO_CHOICES,
        default='dinheiro',
        verbose_name="üí≥ Forma de Pagamento"
    )
    
    # Campos espec√≠ficos para cr√©dito
    cartao_credito = models.ForeignKey(
        CartaoCredito,
        on_delete=models.PROTECT,
        blank=True,
        null=True,
        verbose_name="üí≥ Cart√£o de Cr√©dito",
        help_text="Obrigat√≥rio apenas para pagamento no cr√©dito"
    )
    parcelas = models.IntegerField(
        choices=PARCELAS_CHOICES,
        default=1,
        verbose_name="üîÑ Parcelas",
        help_text="N√∫mero de parcelas (apenas para cr√©dito)"
    )
    
    observacoes = models.TextField(
        blank=True,
        verbose_name="üìã Observa√ß√µes",
        help_text="Informa√ß√µes adicionais sobre a compra"
    )
    
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)

    class Meta:
        verbose_name = "üõí Compra"
        verbose_name_plural = "üõí Compras"
        ordering = ['-data_compra', '-created_at']

    def __str__(self):
        return f"{self.fornecedor.nome} - {self.descricao[:50]} - R$ {self.valor_total}"

    @property
    def sai_saldo_imediato(self):
        """Verifica se o pagamento sai do saldo imediatamente"""
        return self.forma_pagamento in ['dinheiro', 'pix', 'debito']

    @property
    def valor_parcela(self):
        """Calcula o valor de cada parcela"""
        if self.forma_pagamento == 'credito' and self.parcelas > 1:
            return self.valor_total / self.parcelas
        return self.valor_total

    @property
    def status_pagamento(self):
        """Retorna status do pagamento"""
        if self.sai_saldo_imediato:
            return "‚úÖ Pago (saldo imediato)"
        else:
            return f"‚è≥ Parcelado em {self.parcelas}x"

    def clean(self):
        from django.core.exceptions import ValidationError
        
        # Validar cart√£o de cr√©dito obrigat√≥rio para forma de pagamento cr√©dito
        if self.forma_pagamento == 'credito' and not self.cartao_credito:
            raise ValidationError({
                'cartao_credito': 'Cart√£o de cr√©dito √© obrigat√≥rio para pagamento no cr√©dito.'
            })
        
        # Limpar cart√£o e parcelas se n√£o for cr√©dito
        if self.forma_pagamento != 'credito':
            self.cartao_credito = None
            self.parcelas = 1

    def save(self, *args, **kwargs):
        self.full_clean()
        super().save(*args, **kwargs)

class ParcelaCompra(models.Model):
    """Model para controlar parcelas de compras no cr√©dito"""
    compra = models.ForeignKey(
        Compra,
        on_delete=models.CASCADE,
        related_name='parcelas_detalhadas'
    )
    numero_parcela = models.IntegerField(verbose_name="N¬∫ Parcela")
    valor_parcela = models.DecimalField(
        max_digits=10,
        decimal_places=2,
        verbose_name="Valor da Parcela"
    )
    data_vencimento = models.DateField(verbose_name="Data Vencimento")
    paga = models.BooleanField(default=False, verbose_name="Paga")
    data_pagamento = models.DateField(blank=True, null=True, verbose_name="Data Pagamento")

    class Meta:
        verbose_name = "üìÖ Parcela"
        verbose_name_plural = "üìÖ Parcelas"
        ordering = ['compra', 'numero_parcela']
        unique_together = ['compra', 'numero_parcela']

    def __str__(self):
        status = "‚úÖ" if self.paga else "‚è≥"
        return f"{status} {self.compra.fornecedor.nome} - Parcela {self.numero_parcela}/{self.compra.parcelas}"